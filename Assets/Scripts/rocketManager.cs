using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using DG.Tweening;
using TMPro;
using UnityEngine.SceneManagement;
using SupersonicWisdomSDK;
//using Firebase.Analytics;
//using LionStudios.Suite.Analytics;
//using LionStudios.Suite.Ads;

public class rocketManager : MonoBehaviour
{
    public GameObject restartButton;
   public adsManager ads;
    public enablePowerupAds enablePowerupAds;
    public List<GameObject> tappedRocket = new List<GameObject>();
    public TextMeshProUGUI notEnoughCoins;
    public TextMeshProUGUI levelText;
    public TextMeshProUGUI coinsText;
    public GameObject coinsContinue;
    public GameObject continueButton;
    public GameObject levels;
    public List<GameObject>  blocks;
    public GameObject currentBlock;
    public GameObject nextBlock;
    public EyeSync currentPupilLook;
    public GameObject slots;
    public GameObject grid;
    public int curSlot =0;
    public AudioSource tap;
    public AudioSource blockDestroy;
    public GameObject inputManager;
    public GameObject levelFail;
    public GameObject levelComplete;
    public GameObject guideObj;
    public AudioSource beep;
   
     public bool pause = false;
    int levelId;
    public GameObject slotItem;
    public GameObject lockedSlot10;
    public GameObject lockedSlot40;
    public int curnewSlot =5; //total slots
    public int newSlots = 0;   // slots generated by PlayON feature
    float defaultnewSlotPosX = -1.95f;
    float defaultnewSlotPosY = 3.15f;
    public int coins;
    int attemptnum =1;
    public GameObject tutLevelLabel;

    public GameObject confetti;
    public GameObject loadingScreen;
    private void Awake()
    {
        levelId = PlayerPrefs.GetInt("Level");
        if(PlayerPrefs.GetInt("attemptNum")==0)
        {
            PlayerPrefs.SetInt("attemptNum", 1);
        }

        attemptnum = PlayerPrefs.GetInt("attemptNum");
        
      //  SupersonicWisdom.Api.NotifyLevelStarted(levelType:ESwLevelType.Regular, levelId+1, null);

        //  LionAnalytics.LevelStart(levelId + 1, attemptnum, null);


        /*  FirebaseAnalytics.LogEvent(FirebaseAnalytics.EventLevelStart, new Parameter[]
           {
              new Parameter(FirebaseAnalytics.ParameterLevelName, "Level"+(levelId+1))
               // Add other parameters if needed
           });*/

        levelText.text = "Level" + " " + (levelId+1).ToString();
        
        if(levelId<56)
        {
            if(levelId ==10||levelId ==15)
            {
                guideObj.SetActive(true);

            }
            if(levelId>10)
            {
                restartButton.SetActive(true);
            }
            levels.transform.GetChild(levelId).gameObject.SetActive(true);
        }
        else
        {
            int r = Random.Range(12, 56);
            levels.transform.GetChild(r).gameObject.SetActive(true);
        }


        int ind = 0;
        foreach(Transform child in GameObject.FindGameObjectWithTag("blocks").gameObject.transform)
        {
            if(ind!=0 && ind !=1)
            {
                child.gameObject.SetActive(false);
            }
            blocks.Add(child.gameObject);
            ind++;
        }
        
        blocks[0].transform.DOLocalMove(new Vector3(0, 0, 4), 0.5f);
        blocks[0].transform.DOScale(new Vector3(1.1f, 1.1f, 1.1f), 0.5f);
        // blocks.AddRange(GameObject.FindGameObjectWithTag("levelManager").GetComponent<levelManager>().blocks);
        slots = GameObject.FindGameObjectWithTag("slots").gameObject;
        grid = GameObject.FindGameObjectWithTag("grid").gameObject;
        coinsText.text = PlayerPrefs.GetInt("coins").ToString();
    


    }
    // Start is called before the first frame update
    void Start()
    {
        currentBlock = blocks[0];
        if(blocks.Count>1)
        {
            nextBlock = blocks[1];
        }
        
        nextBlock.SetActive(true);

        //check if block have face
        currentPupilLook = currentBlock.GetComponentInChildren<EyeSync>();
        
    }

    // Update is called once per frame
    void Update()
    {
        
       /* if (pause)
            Time.timeScale = 0;*/
    }

    public int calOpenSlot()
    {
        for (int i = 0; i < slots.transform.childCount; i++)
        {
            if (slots.transform.GetChild(i).transform.childCount == 0)
            {
                curSlot = i;
                return i;
            }
        }
        return -1; // Return -1 or another appropriate value to indicate no open slot was found
    }

    public void OnCurBlockDestroy()
    {

        if(currentBlock!=null)
        {
            blocks.Remove(currentBlock);
        }
       
        if (blocks.Count == 0)
        {
            levelCompleted();
        }

        else if(calOpenSlot() !=-1)

        {
            currentBlock = nextBlock;
            currentPupilLook = currentBlock.GetComponentInChildren<EyeSync>();

            Vector3 targtePos = new Vector3(0, currentBlock.transform.position.y, currentBlock.transform.position.z);
            //currentBlock.transform.DOPunchPosition(targtePos, 0.8f).OnComplete(()=>
            currentBlock.transform.DOScale(new Vector3(1.1f, 1.1f, 1.1f), 0.8f);
            currentBlock.transform.DOMoveX(0, 0.8f).SetEase(Ease.InOutFlash).OnComplete(() =>
            {
                if(CustomEffectsManager.instance != null )
                {
                    CustomEffectsManager.instance.PlayNewBlockCameEffect();
                }
                
                if (blocks.Count > 1)
                {
                    
                    nextBlock = blocks[1];
                    nextBlock.SetActive(true);
                }


                float delay = 0;
                int c = 0;
                for (int i = 0; i < slots.transform.childCount; i++)
                {

                    if (slots.transform.GetChild(i).transform.childCount > 0 && c <3)
                    {

                        GameObject rocket = slots.transform.GetChild(i).transform.GetChild(0).gameObject;
                        if (rocket.GetComponent<shootRocket>().color == currentBlock.name && currentBlock.GetComponent<goals>().count > 0)
                        {
                            c++;
                            delay = 0f;
                            rocket.transform.SetParent(null);

                            transform.DOMove(transform.position, delay).OnComplete(() =>
                            {

                                if(rocket.GetComponent<shootRocket>().color == currentBlock.name )
                                {
                                    rocket.GetComponent<shootRocket>().target = currentBlock.transform;
                                    rocket.GetComponent<shootRocket>().move = true;
                                    rocket.GetComponent<Rigidbody>().isKinematic = false;
                                }
                           


                            });


                        }

                    }

                }
            });
        }
    }

    public void levelFailed()
    {
        if (!levelFail.activeSelf)
        {
            if(levelId>11)
            {
                StartCoroutine(addDelayForAds(0.7f));
            }
            levelFail.SetActive(true);
            inputManager.GetComponent<inputManager>().enabled = false;
           // SupersonicWisdom.Api.NotifyLevelFailed(ESwLevelType.Regular, levelId+1, null);

            //LionAnalytics.LevelFail(levelId + 1, attemptnum, score: null);
            attemptnum++;
           
            PlayerPrefs.SetInt("attemptNum", attemptnum);

            /* foreach(GameObject rocket in tappedRocket)
             {
                 rocket.GetComponent<shootRocket>().move = false;
                 rocket.GetComponent<Rigidbody>().isKinematic = true;
             }*/
           
        }

    }

    public void levelCompleted()
    {
        if (PlayerPrefs.GetInt("Level") == 0)
        {
            tutLevelLabel.SetActive(false);
        }
        inputManager.GetComponent<inputManager>().enabled = false;
        StartCoroutine(addlevelCompleteDelay(1.5f));




    }

    public void powerUp2Button()
    {
       

        if (PlayerPrefs.GetInt("coins") > 49)
        {

            PowerUp2Func();
            int coin = PlayerPrefs.GetInt("coins") - 50;
            coinsText.text = coin.ToString();
            PlayerPrefs.SetInt("coins", coin);
            enablePowerupAds.enableChildAds();
        }
        else
        {
           ads.ShowRWVideoAds("powerup2");
            /* notEnoughCoins.gameObject.SetActive(true);
             notEnoughCoins.transform.DOMove(notEnoughCoins.transform.position, 0.8f).OnComplete(() => { notEnoughCoins.gameObject.SetActive(false); });*/
        }
    }


  public  void PowerUp2Func()
    {
        bool breakOuside = false;
        for (int i = 0; i < grid.transform.childCount; i++)
        {
            GameObject rocketParent = grid.transform.GetChild(i).gameObject;
            GameObject rocketChild = rocketParent.transform.GetChild(0).gameObject;


            if (rocketChild.GetComponent<shootRocket>() != null)
            {
                if (rocketChild.GetComponent<shootRocket>().color == currentBlock.name)
                {
                    rocketChild.transform.SetParent(null);
                    Destroy(rocketParent);
                    rocketChild.GetComponent<Rigidbody>().isKinematic = false;
                    rocketChild.GetComponent<shootRocket>().enabled = true;
                    break;
                }

            }

            else if (rocketChild.GetComponent<hiddenObj>() != null)

            {
                GameObject rocketPar = rocketChild.GetComponent<hiddenObj>().newRocket.gameObject;
                GameObject rocket = rocketPar.transform.GetChild(0).gameObject;

                if (rocket.GetComponent<shootRocket>().color == currentBlock.name)
                {
                    GameObject newRocket = rocketChild.GetComponent<hiddenObj>().InstatiateHiddenRocket();
                    GameObject newRocketChild = newRocket.transform.GetChild(0).gameObject;
                    newRocketChild.transform.SetParent(null);
                    Destroy(newRocket);
                    newRocketChild.GetComponent<Rigidbody>().isKinematic = false;
                    newRocketChild.GetComponent<shootRocket>().enabled = true;
                    break;


                }
            }

            else if (rocketChild.GetComponent<Spawner>() != null)
            {
                for (int r = rocketChild.GetComponent<Spawner>().c; r < rocketChild.GetComponent<Spawner>().rocketsList.Count; r++)
                {

                    GameObject rocketPar = rocketChild.GetComponent<Spawner>().rocketsList[r].gameObject;
                    GameObject rocket = rocketPar.transform.GetChild(0).gameObject;
                    if (rocket.GetComponent<shootRocket>().color == currentBlock.name)
                    {

                        GameObject rock = Instantiate(rocketPar, rocketParent.transform.position, rocketChild.GetComponent<Spawner>().spawnRot, grid.transform);
                        GameObject rockChild = rock.transform.GetChild(0).gameObject;
                        rockChild.transform.SetParent(null);
                        Destroy(rock);
                        rockChild.GetComponent<Rigidbody>().isKinematic = false;
                        rockChild.GetComponent<shootRocket>().enabled = true;

                        rocketChild.GetComponent<Spawner>().postSpawnCode(r);
                        breakOuside = true;
                        break;
                    }

                }
                if (breakOuside)
                    break;
            }


        }
    }


    public  void playON() 
    {
        levelFail.SetActive(false);
        int coin = PlayerPrefs.GetInt("coins") - 200;
        coinsText.text = coin.ToString();
        PlayerPrefs.SetInt("coins", coin);
        inputManager.GetComponent<inputManager>().enabled = true;
        
        if( incrementSlots(3))
        {
            foreach (GameObject rocket in tappedRocket)
            {
                rocket.GetComponent<shootRocket>().setTarget();
                rocket.GetComponent<shootRocket>().move = true;
                rocket.GetComponent<Rigidbody>().isKinematic = false;
            }
            if(currentBlock==null)
            {
                OnCurBlockDestroy();
            }
        }


      

    }

    public bool incrementSlots(int count)
    {
        if(curnewSlot<14)
        {
            for (int i = 0; i < count; i++)
            {
                GameObject slot = Instantiate(slotItem, new Vector3(defaultnewSlotPosX, 0, defaultnewSlotPosY), Quaternion.Euler(90, 0, 0), slots.transform);
                slot.transform.localPosition = new Vector3(slot.transform.localPosition.x, 0, defaultnewSlotPosY);
                defaultnewSlotPosX += 0.65f;
                slot.gameObject.name = "Slot" + curnewSlot.ToString();
                curnewSlot++;
                newSlots++;
                /*if(newSlots == 5)
                {
                    defaultnewSlotPosY = 1.85f;
                    defaultnewSlotPosX = -1.3f;
                }*/
            }
        }

        return true;
    }

    public void loadScene()
    {
        loadingScreen.SetActive(true);
        SceneManager.LoadScene(1);
    }

    public void justContinue()
    {
        continueButton.SetActive(false);
        coinsContinue.SetActive(true);
        for (int i = 0; i < coinsContinue.transform.childCount; i++)
        {
            float r = Random.Range(1f, 1.5f);

            if (i == coinsContinue.transform.childCount - 1) // for Last Coin
            {
                coinsContinue.transform.GetChild(i).transform.DOMove(coinsText.transform.position, 1.2f).SetEase(Ease.InBack)
                        .OnComplete(() => {
                            int coin = PlayerPrefs.GetInt("coins") + 30;
                            coinsText.text = coin.ToString();
                            PlayerPrefs.SetInt("coins", coin);
                            StartCoroutine(addDelay(0.3f));



                        });
            }
            else
            {
                coinsContinue.transform.GetChild(i).transform.DOMove(coinsText.transform.position, r).SetEase(Ease.InBack);
            }
        }
    }

    private IEnumerator addDelay(float waitTime)
    {
        yield return new WaitForSeconds(waitTime);
        loadScene();
    }
    private IEnumerator addlevelCompleteDelay(float waitTime)
    {
        confetti.SetActive(true);
        yield return new WaitForSeconds(waitTime);
        if(levelId > 7)
        {
            ads.ShowInterstitial();
        }
       // SupersonicWisdom.Api.NotifyLevelCompleted(ESwLevelType.Regular, levelId+1, null);

        //LionAnalytics.LevelComplete(levelId + 1, attemptnum);

        PlayerPrefs.SetInt("Level", levelId + 1);
        attemptnum = 1;
        PlayerPrefs.SetInt("attemptNum", attemptnum);
        levelComplete.SetActive(true);
    }
    public void playONRewarded()
    {
        levelFail.SetActive(false);
      /*  int coin = PlayerPrefs.GetInt("coins") - 50;
        coinsText.text = coin.ToString();
        PlayerPrefs.SetInt("coins", coin);*/
        inputManager.GetComponent<inputManager>().enabled = true;

        if (incrementSlots(3))
        {
            foreach (GameObject rocket in tappedRocket)
            {
                rocket.GetComponent<shootRocket>().setTarget();
                rocket.GetComponent<shootRocket>().move = true;
                rocket.GetComponent<Rigidbody>().isKinematic = false;
            }
            if (currentBlock == null)
            {
                OnCurBlockDestroy();
            }
        }




    }
    private IEnumerator addDelayForAds(float waitTime)
    {
        yield return new WaitForSeconds(waitTime);
       ads.ShowInterstitial();
    }

    public void playONrewardedVideo()
    {
        ads.ShowRWVideoAds("playon");
     
    }

}


